# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # workflow_dispatch

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Install DVC
      uses: iterative/setup-dvc@v2
      with:
        version: '3.59.1'

    - name: "Configure AWS Credentials"
      # Action for GitHub Actions
      # You may pin to the exact commit or the version.
      # uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722
      uses: aws-actions/configure-aws-credentials@v4.1.0
      with:
        # AWS Region, e.g. us-east-2
        aws-region: us-east-1
        # AWS Access Key ID. Provide this key if you want to assume a role using access keys rather than a web identity token.
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # AWS Secret Access Key. Required if aws-access-key-id is provided.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: configure storage
      run: dvc remote add -d s3-bucket s3://mlops-udacity-3/dvc/
      
    - name: Version Data
      run: dvc pull

    - name: Test with pytest
      run: 
        python -m pytest  


  # merge:
  #   name: merge to deployment branch
  #   needs: build
  #   runs-on: ubuntu-latest

  #   # https://cli.github.com/manual/gh_pr_create
  #   steps:
  #     - name: merge 
  #       run: gh pr create -B deploy -H main --title 'Merge main branch into deploy' --body 'Created by Github action'
  #       # env:
  #       #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
  # https://render.com/docs/deploy-hooks
  deploy_api:
    name: deploy on render
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Deploy
        # Only run this step if the branch is deploy
        if: github.ref == 'refs/heads/main'
        env:
          deploy_url: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          curl "$deploy_url"

    
  # deploy_streamlit:
  #   name: deploy on streamlist 
  #   needs: build
  #   runs-on: ubuntu-latest
        